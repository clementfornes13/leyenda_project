import numpy as np
from PIL import Image
import streamlit as st
from Livrable1 import classify_image_external
from Livrable2 import denoise_image_external
from Livrable3 import generate_caption_external


def show_pipeline():

    st.title("Pipeline enti√®re")

    st.divider()

    st.header("√âtape 0 : Import de l'image")
    uploaded_file = st.file_uploader("Choisissez une image (format JPG ou PNG)", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file).convert("RGB")
        image_np = np.array(image).astype(np.float32) / 255.0

        st.image(image, caption="Image originale import√©e", use_container_width=True)

        st.divider()

        st.header("√âtape 1 : Classification (Photo vs Non-Photo)")
        is_photo = classify_image_external(image_np)

        if not is_photo:
            st.error("‚ùå Ce n‚Äôest pas une photo. Le pipeline s‚Äôarr√™te ici.")
            return
        else:
            st.success("‚úÖ C‚Äôest bien une photo ! √âtapes suivantes...")

        st.divider()

        st.header("√âtape 2 : Pr√©traitement (bruit + d√©bruitage)")
        apply_denoise = st.toggle("Appliquer le pr√©traitement", value=False)

        if apply_denoise:
            noise_amount = st.slider(
                "Intensit√© du bruit simul√© (avant d√©bruitage)",
                min_value=0.1, max_value=0.5, step=0.05, value=0.2
            )

            with st.spinner("D√©bruitage de l'image en cours..."):
                denoised_img = denoise_image_external(image_np, amount=noise_amount)

            st.image((denoised_img * 255).astype(np.uint8), caption="Image apr√®s pr√©traitement", use_container_width=True)
        else:
            denoised_img = image
            st.info("‚ÑπÔ∏è Pr√©traitement d√©sactiv√©. L'image originale est utilis√©e pour le captioning.")

        st.divider()

        st.header("üñãÔ∏è √âtape 3 : G√©n√©ration automatique de l√©gende")

        with st.spinner("G√©n√©ration de l√©gende..."):
            caption = generate_caption_external(denoised_img)

        st.success(f"L√©gende g√©n√©r√©e avec succ√®s : {caption}")

        st.download_button("T√©l√©charger la l√©gende", data=caption, file_name="caption.txt", mime="text/plain")